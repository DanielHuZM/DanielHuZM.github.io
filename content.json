[{"title":"Python web development with Flask(4) -- flask-script模块与click模块","date":"2019-06-17T14:13:49.000Z","path":"2019/06/17/No.6/","excerpt":"Flask-scriptFlask Script扩展提供向Flask插入外部脚本的功能，包括运行一个开发用的服务器，一个定制的Python shell，设置数据库的脚本，cronjobs，及其他运行在web应用之外的命令行任务；使得脚本和系统分开； Flask Script和Flask本身的工作方式类似，只需定义和添加从命令行中被Manager实例调用的命令； 先来看一个简单的例子： 1234567891011121314# manage.py# 导入库from flask_script import Managerfrom debug import app# 实例,参数为Flask实例manager = Manager(app)# 使用command实例的@command修饰符@manager.commanddef hello(): print(&apos;hello world&apos;)if __name__ == &apos;__main__&apos;: manager.run()","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"web development","slug":"web-development","permalink":"http://yoursite.com/tags/web-development/"}]},{"title":"Python web development with Flask(3)--Blueprints 蓝图","date":"2019-06-17T06:22:33.000Z","path":"2019/06/17/No5/","excerpt":"白话版 在基于Flask框架的web开发学习中，遇到了Blueprints （蓝图）的概念，转载一篇知乎上关于此的高分回答。 恩，理解「蓝本」对于没有接触其他Web编程实现的Python+Flask新手而言，是一个不好迈过的坎儿。 我得用「比喻」的方式穿插讲述一下「蓝本」，方便你更好理解，问这个问题估计是新手，所以我啰嗦点好了。 首先，提一下概念，「蓝本」的对应官方词汇是「Blueprint」，中译还有「蓝图」这种叫法，是一种东西。你去餐馆吃饭，点一些菜，你一定吃过「麻辣香锅」这种东西。你可以点一些杂七杂八的菜，选好口味，之后一个碗儿端上来，你吃的很滋味，并且也会觉得这种「一锅端」的方式很好，毕竟不会一道吃完等下一道啊，一起上来热乎乎的多好。并且吃的很少的时候，一点点的菜单独用一个碗儿装也是有点「装逼」的事情。 假如你一个人一己之力要写一个BBS（论坛系统）的话，上面的这个例子，其真实写照是初期功能很弱时，可能页面不多，实现的功能也很少。可能首页就是一个帖子列表，允许用户发布帖子，并且不涉及登录退出、会员等级、权限管理等，你想着，那是后面再说的事情。于是，你将网站主干代码写在一个run.py文件里，让网站成功的跑了起来，你觉得这样实现很方便，快捷。 如果我让你这个时候把run.py理一下，能独立出来的独立成其他的文件，之后在run.py里导入，你要骂我「装逼」了，没事找事。是的，「蓝本」并不适合用来构建想当简单的网站系统。","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"web development","slug":"web-development","permalink":"http://yoursite.com/tags/web-development/"}]},{"title":"python中的多进程使用总结（1）","date":"2019-06-14T13:31:43.000Z","path":"2019/06/14/No4/","excerpt":"今天去一家公司面试，在笔试过程中遇到了多线程、多进程等问题，之前的学习中对此内容都是一笔带过，未曾深入了解。此外，之后希望完成一个基于Django的仿淘宝秒杀系统，将不可避免地遇到多进程、分布式的编程问题，因此今天在此系统性地学习多进程、多线程，并做一个总结。 首先来谈谈多进程。 fork() in Linux/UnixLinux 系统提供了一个fork()系统调用，普通的函数调用，调用一次，返回一次，但是fork()调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。 子进程永远返回0，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用getppid()就可以拿到父进程的ID。来看代码：","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"多进程","slug":"多进程","permalink":"http://yoursite.com/tags/多进程/"}]},{"title":"Python 中的正则表达式","date":"2019-06-12T15:59:58.000Z","path":"2019/06/12/No3/","excerpt":"这节来聊聊Python中的正则表达式。字符串是编程时涉及到的最多的一种数据结构，对字符串进行操作的需求几乎无处不在。正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。 通过使用正则表达式，可以： 测试字符串内的模式。例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。 替换文本。可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。 基于模式匹配从字符串中提取子字符串。可以查找文档内或输入域内特定的文本。","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"Regular Expression","slug":"Regular-Expression","permalink":"http://yoursite.com/tags/Regular-Expression/"}]},{"title":"Python web development with Flask(2)","date":"2019-06-09T14:23:55.000Z","path":"2019/06/09/No2/","excerpt":"上节聊了Flask程序的运作方式，以及构建一个外部可访问的Flask程序的方法。在本节中，主要聚焦于隐藏在Flask背后的重要角色——HTTP，看看Flask是如何与之进行前后端交互的。 请求循环效应随意输入一个网址，按下Enter，浏览器便会显示一个对应网页。在其背后，实际上是程序正在运行着，它负责接收用户的请求，并把对应的内容返回给客户端，显示在用户的浏览器上。事实上，每一个Web应用都包含这种处理模式，即“请求-响应循环(Request-Response)。注：客户端（Client Side）是指用来提供给用户的与服务器通信的各种软件；服务器端（Server Side）则指为用户提供服务的服务器，也是我们的程序运行的地方。 这是每一个Web程序的基本工作模式，如果再进一步，HTTP在整个流程中起到了至关重要的作用，它是客户端和服务器端之间沟通的桥梁。 当用户访问一个URL，浏览器便生成对应的HTTP请求，经由互联网发送到对应的Web服务器。Web服务器接收请求，通过WSGI将HTTP格式的请求数据转换成我们的Flask程序能够使用的Python数据。在程序中，Flask根据请求的URL执行对应的视图函数，获取返回值生成响应。响应依次经过WSGI转换生成HTTP响应，再经由Web服务器传递，最终被发出请求的客户端接收。浏览器渲染响应中包含的HTML和CSS代码，并执行JavaScript代码，最终把解析后的页面呈现在用户浏览器的窗口中。","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"web development","slug":"web-development","permalink":"http://yoursite.com/tags/web-development/"},{"name":"Http","slug":"Http","permalink":"http://yoursite.com/tags/Http/"}]},{"title":"Python web development with Flask(1)","date":"2019-06-09T03:21:53.000Z","path":"2019/06/09/No1/","excerpt":"前言Flask是目前最为流行的Python Web框架之一。Flask仅仅保留了Web框架的核心，其他功能都交由扩展实现。因其灵活性，越来越多的公司选择Flask作为Web框架，知名公司有Netflix、Reddit和豆瓣等，这也说明了Flask能够经受大型项目的挑战，适应各种需求。 开发环境OS ：Windows 10 (x64)软件 : Pycharm版本管理： Git Hello, Flask!这是一个最小的Flask程序，仅需5行就能够实现。","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"web development","slug":"web-development","permalink":"http://yoursite.com/tags/web-development/"}]},{"title":"Hello World","date":"2019-06-09T03:11:26.209Z","path":"2019/06/09/hello-world/","excerpt":"","tags":[]}]